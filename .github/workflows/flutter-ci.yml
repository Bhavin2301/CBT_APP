name: Flutter CI/CD

on:
  push:
    branches:
      - main  # Runs workflow on push to 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.16.0  
          channel: stable

      - name: Clean Project (Prevent Cache Issues)
        run: flutter clean

      - name: Install Dependencies
        run: flutter pub get

      - name: Install Required Dependencies (.NET 6 for OWASP)
        run: |
          echo "🔍 Updating package lists..."
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          
          echo "🔍 Installing .NET 6 SDK..."
          wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y dotnet-sdk-6.0 || echo "⚠️ .NET 6 installation failed, skipping..."

      - name: Run OWASP Dependency Check
        run: |
          curl -LO https://github.com/jeremylong/DependencyCheck/releases/download/v8.3.1/dependency-check-8.3.1-release.zip
          unzip dependency-check-8.3.1-release.zip
          mkdir -p dependency-check-report
          ./dependency-check/bin/dependency-check.sh --project "FlutterApp" --scan . --format "ALL" --out dependency-check-report/

      - name: Upload OWASP Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: OWASP-Dependency-Check-Report
          path: dependency-check-report/

      - name: Run Tests
        run: flutter test

      - name: Build APK
        run: flutter build apk --release

      - name: Debug APK Build (Ensure File Exists)
        run: |
          echo "🔍 Checking APK output directory..."
          ls -l build/app/outputs/flutter-apk/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS CLI Installation & Credentials
        run: |
          echo "🔍 Verifying AWS CLI installation..."
          aws --version
          echo "🔍 Checking AWS S3 Bucket Name..."
          echo "Bucket: ${{ secrets.S3_BUCKET_NAME }}"

      - name: Upload APK to AWS S3
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          echo "🚀 Uploading APK to S3..."
          aws s3 cp build/app/outputs/flutter-apk/app-release.apk s3://$S3_BUCKET_NAME/app-release.apk --acl public-read
          echo "✅ Upload complete!"

      - name: Print APK Download Link
        run: echo "🚀 APK is available at: https://${{ secrets.S3_BUCKET_NAME }}.s3.amazonaws.com/app-release.apk"

      - name: Delete Existing GitHub Release & Tag (If Exists)
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        continue-on-error: true
        run: |
          echo "🔍 Checking for existing release..."
          if gh release view "latest" >/dev/null 2>&1; then
            echo "🗑️ Deleting existing release..."
            gh release delete "latest" --yes
          fi
          
          echo "🔍 Checking for existing tag..."
          if git rev-parse "latest" >/dev/null 2>&1; then
            echo "🗑️ Deleting existing tag..."
            git push --delete origin "latest"
            git tag -d "latest"
          fi

      - name: Create GitHub Release (Always Updates Latest)
        uses: ncipollo/release-action@v1
        with:
          tag: latest
          name: "Latest Release"
          body: "🚀 New release available! [Download APK](https://${{ secrets.S3_BUCKET_NAME }}.s3.amazonaws.com/app-release.apk)"
          draft: false
          prerelease: false
          token: ${{ secrets.GH_PAT }}
