name: Flutter CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cirruslabs/flutter:latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify Flutter & Dart Versions
        run: |
          flutter --version || { echo "Flutter not installed correctly!"; exit 1; }
          dart --version || { echo "Dart not installed correctly!"; exit 1; }

      - name: Clean Project
        run: flutter clean || true

      - name: Install Dependencies
        run: flutter pub get || { echo "Failed to install dependencies!"; exit 1; }

      - name: Upgrade Dependencies
        run: flutter pub upgrade || true

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Dependencies for OWASP Check
        run: sudo apt-get update && sudo apt-get install -y unzip curl wget

      - name: Download OWASP Dependency-Check
        run: |
          DEP_CHECK_VERSION="8.4.0"  # Change this to the latest version when updating
          DOWNLOAD_URL="https://github.com/jeremylong/DependencyCheck/releases/download/v${DEP_CHECK_VERSION}/dependency-check-${DEP_CHECK_VERSION}-release.zip"

          echo "Downloading OWASP Dependency-Check from: $DOWNLOAD_URL"
          curl -L -o dependency-check.zip "$DOWNLOAD_URL"

          if [ ! -s dependency-check.zip ]; then
            echo "Downloaded file is empty or invalid. Exiting!"
            exit 1
          fi

      - name: Extract OWASP Dependency-Check
        run: |
          if ! unzip -o dependency-check.zip -d dependency-check; then
            echo "Unzip failed! Invalid ZIP file or corrupted download."
            exit 1
          fi
          chmod +x dependency-check/dependency-check/bin/dependency-check.sh

      - name: Run OWASP Dependency Check
        run: |
          mkdir -p dependency-check-report
          dependency-check/dependency-check/bin/dependency-check.sh \
            --project "FlutterApp" --scan . --format "ALL" --out dependency-check-report/ \
            --cveValidForHours 48 --connectionTimeout 60000 || echo "OWASP Scan completed with warnings."

      - name: Upload OWASP Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: OWASP-Dependency-Check-Report
          path: dependency-check-report/

  test-build-upload:
    runs-on: ubuntu-latest
    needs: security-scan
    container:
      image: ghcr.io/cirruslabs/flutter:latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Tests
        run: flutter test || { echo "Tests failed!"; exit 1; }

      - name: Ensure Gradle Wrapper Exists
        run: |
          if [ ! -f android/gradlew ]; then
          echo "Gradle wrapper missing, creating it..."
          cd android
          gradle wrapper --gradle-version 7.5.1 --distribution-type all
          cd ..
          fi
          chmod +x android/gradlew


      - name: Force Gradle Sync
        run: cd android && ./gradlew wrapper --gradle-version 7.5.1 --distribution-type all

      - name: Install Dependencies
        run: flutter pub get || { echo "Failed to install dependencies!"; exit 1; }

      - name: Build APK
        run: flutter build apk --release || { echo "Flutter build failed!"; exit 1; }

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version || { echo "AWS CLI installation failed!"; exit 1; }

      - name: Upload APK to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          aws s3 cp build/app/outputs/flutter-apk/app-release.apk s3://$S3_BUCKET_NAME/app-release.apk --acl public-read || {
            echo "Failed to upload APK to S3!"; exit 1;
          }

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: latest
          name: "Latest Release"
          body: "[Download APK](https://${{ secrets.S3_BUCKET_NAME }}.s3.amazonaws.com/app-release.apk)"
          token: ${{ secrets.GITHUB_TOKEN }}
