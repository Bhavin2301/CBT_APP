name: Flutter CI/CD

on:
  push:
    branches:
      - main  # Runs workflow on push to 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: Clear GitHub Actions Cache
        run: |
          sudo rm -rf /opt/hostedtoolcache
          
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.16.0  
          channel: stable

      - name: Clean Project (Prevent Cache Issues)
        run: flutter clean

      - name: Install Dependencies
        run: flutter pub get

      - name: Run OWASP Dependency Check
        run: |
          curl -LO https://github.com/jeremylong/DependencyCheck/releases/download/v8.3.1/dependency-check-8.3.1-release.zip
          unzip dependency-check-8.3.1-release.zip
          mkdir -p dependency-check-report  # âœ… Ensure the output directory exists
          ./dependency-check/bin/dependency-check.sh --project "FlutterApp" --scan . --format "ALL" --out dependency-check-report/

      - name: Upload OWASP Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: OWASP-Dependency-Check-Report
          path: dependency-check-report/

      - name: Run Tests
        run: flutter test

      - name: Build APK
        run: flutter build apk --release

      - name: Extract App Version
        run: |
          echo "Extracting app version from pubspec.yaml"
          APP_VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}')
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Rename APK with Version
        run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/app-v${{ env.APP_VERSION }}.apk

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS CLI Installation
        run: aws --version

      - name: Debug APK Build
        run: ls -l build/app/outputs/flutter-apk/

      - name: Upload APK to AWS S3
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          aws s3 cp build/app/outputs/flutter-apk/app-v${{ env.APP_VERSION }}.apk s3://$S3_BUCKET_NAME/app-v${{ env.APP_VERSION }}.apk --acl public-read

      - name: Print APK Download Link
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: echo "ðŸš€ APK is available at:https://${{ secrets.S3_BUCKET_NAME }}.s3.amazonaws.com/app-v${{ env.APP_VERSION }}.apk"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.APP_VERSION }}
          name: Release v${{ env.APP_VERSION }}
          body: "ðŸš€ New release available! [Download APK](https://${{ secrets.S3_BUCKET_NAME }}.s3.amazonaws.com/app-v${{ env.APP_VERSION }}.apk)"
          draft: false
          prerelease: false
          token: ${{ secrets.GH_PAT }}  
