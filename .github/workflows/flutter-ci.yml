name: Flutter CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cirruslabs/flutter:latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify Flutter & Dart Versions
        run: |
          flutter --version || { echo "Flutter not installed correctly!"; exit 1; }
          dart --version || { echo "Dart not installed correctly!"; exit 1; }

      - name: Clean Project
        run: flutter clean || true

      - name: Install Dependencies
        run: flutter pub get || { echo "Failed to install dependencies!"; exit 1; }

      - name: Upgrade Dependencies
        run: flutter pub upgrade || true

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Dependencies for OWASP Check
        run: apt-get update && apt-get install -y unzip


      - name: Install OWASP Dependency-Check
        run: |
          curl -LO https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.2/dependency-check-8.4.2-release.zip
          unzip -o dependency-check-8.4.2-release.zip -d dependency-check
          chmod +x dependency-check/dependency-check/bin/dependency-check.sh

      - name: Run OWASP Dependency Check
        run: |
          mkdir -p dependency-check-report
          dependency-check/dependency-check/bin/dependency-check.sh \
            --project "FlutterApp" --scan . --format "ALL" --out dependency-check-report/

      - name: Upload OWASP Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: OWASP-Dependency-Check-Report
          path: dependency-check-report/

  test-build-upload:
    runs-on: ubuntu-latest
    needs: security-scan
    container:
      image: ghcr.io/cirruslabs/flutter:latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Tests
        run: flutter test || { echo "Tests failed!"; exit 1; }

      - name: Ensure Gradle Wrapper Exists
        run: |
          if [ ! -f android/gradlew ]; then
            echo "Gradle wrapper missing, creating it..."
            flutter pub get
            flutter build apk --debug || true
          fi
          chmod +x android/gradlew

      - name: Upgrade Gradle Wrapper
        run: |
          cd android
          ./gradlew wrapper --gradle-version 8.4 --distribution-type all

      - name: Upgrade Android Gradle Plugin
        run: |
          sed -i 's/com.android.tools.build:gradle:[0-9.]*/com.android.tools.build:gradle:7.3.1/' android/build.gradle
          if ! grep -q 'com.android.tools.build:gradle:7.3.1' android/build.gradle; then
            echo "Failed to update Android Gradle Plugin!"; exit 1;
          fi

      - name: Ensure Correct Android Gradle Plugin Version
        run: |
          sed -i 's/com.android.tools.build:gradle:[0-9.]*/com.android.tools.build:gradle:7.3.0/' android/build.gradle
          sed -i 's/classpath("com.android.tools.build:gradle:[0-9.]*")/classpath("com.android.tools.build:gradle:7.3.0")/' android/build.gradle
          grep "com.android.tools.build:gradle:7.3.0" android/build.gradle || { echo "Failed to enforce Gradle Plugin version!"; exit 1; }

      - name: Clear Gradle Cache and Rebuild
        run: |
          rm -rf ~/.gradle/caches/
          rm -rf ~/.gradle/wrapper/
          cd android
          ./gradlew --stop || true
          ./gradlew clean build --refresh-dependencies || true


      - name: Build APK
        run: flutter build apk --release || { echo "Flutter build failed!"; exit 1; }

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version || { echo "AWS CLI installation failed!"; exit 1; }

      - name: Upload APK to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          aws s3 cp build/app/outputs/flutter-apk/app-release.apk s3://$S3_BUCKET_NAME/app-release.apk --acl public-read || {
            echo "Failed to upload APK to S3!"; exit 1;
          }

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: latest
          name: "Latest Release"
          body: "[Download APK](https://s3.amazonaws.com/${{ secrets.S3_BUCKET_NAME }}/app-release.apk)"
          token: ${{ secrets.GH_PAT }}
